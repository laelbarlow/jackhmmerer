"""
SnakeMake workflow definition file.

"""
import os
import shutil
import glob
from snakemake.io import expand, glob_wildcards
from snakemake.utils import Paramspace
import pandas as pd


# Define list of input files.
db_fasta_files = glob.glob('resources/FASTA_Databases/*.faa')
assert len(db_fasta_files) > 0, """No FASTA files found in the
resources/FASTA_Databases directory (files must have the extension .faa)."""
query_fasta_files = glob.glob('resources/FASTA_Queries/*.faa')
assert len(query_fasta_files) > 0, """No FASTA files found in the
resources/FASTA_Queries directory (files must have the extension .faa)."""
query_names = [os.path.basename(x).rsplit('.', 1)[0] for x in query_fasta_files]


# Declare a dataframe to be a paramspace for E-value thresholds used when
# running jackhmmer.
paramspace1_file = "resources/evalue_thresholds.csv"
paramspace1 = \
Paramspace(pd.read_csv(paramspace1_file))


# Define which rules are to be run without submitting to a cluster via a job
# scheduler.
localrules: final_results, help


# Define workflow rules.

rule final_results:
    """
    Get output files from full analysis.
    """
    input:
        #'results/concat_dbs/database.ssi',
        expand('results/jackhmmer/{params}/tab_outputs/{queryfasta}.txt', \
            queryfasta = query_names, params=paramspace1.instance_patterns),
        expand('results/convert_profiles_to_fasta/{params}/aligned/{queryfasta}_jackhmmer_profile.afaa', \
            queryfasta = query_names, params=paramspace1.instance_patterns),
        expand('results/retrieve_full_length_seqs/{params}/{queryfasta}_full_length_hit_seqs.faa', \
            queryfasta = query_names, params=paramspace1.instance_patterns),
        expand('results/retrieve_full_length_seqs/{params}/{queryfasta}_full_length_top_hit_seqs.faa', \
            queryfasta = query_names, params=paramspace1.instance_patterns),
        'results/concat_dbs/database.faa.ssi',
        'results/plot_num_hits_retrieved',
        'results/workflow_diagram.pdf'

rule help:
    """
    Print list of all targets with help.
    """
    run:
        for rule in workflow.rules:
            print(rule.name)
            print(rule.docstring)


# Include additional workflow rules from files in the rules subdirectory.

include: "rules/concat_dbs.smk"
include: "rules/jackhmmer.smk"
include: "rules/convert_profiles_to_fasta.smk"
include: "rules/index_database.smk"
include: "rules/retrieve_full_length_seqs.smk"
include: "rules/plot_num_hits_retrieved.smk"
include: "rules/plot_workflow.smk"
